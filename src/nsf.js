import {samples} from "../main"

// convert number to little-endian word as 2-element array
function fmtWord(n) {
  return [parseInt((n).toString(16).slice(2), 16),
          parseInt((n).toString(16).slice(0, 2), 16)];
}

// do the opposite
function wordToNum(lo, hi) {
  return (hi << 8) + lo
}

const nsfFormat = [0x4e, 0x45, 0x53, 0x4d, 0x1a]
const version = 1
let totalSongs = 1
let startingSong = 1
const loadAdr = [0x00, 0x80]
const initAdr = [0x00, 0x80]
const playAdr = [0x09, 0x80]

function pad32(string) {
  let name = []
  for (let i = 0; i < 32; i++) {
    if (i < string.length) {
        name.push(string.charCodeAt(i))
    } else {
      name.push(0)
    }
  }
  return name
}

let songName = pad32("Untitled")
let artist = pad32("Unknown")
let copyright = pad32("")

let ntscSpeed = [0xff, 0x40]
// for overclocking to 400Hz
// let ntscSpeed = [0xc4, 0x09]

let banking = [0,1,2,3,4,5,6,7]
let palSpeed = [0x1d, 0x4e]
let playMode = 0
let expansionAudio = 1
let prgLength = 0

const load = [
	// Offset 0x00000080 to 0x0000008C
	0x20, 0x0F, 0x80, 0xA9, 0x00, 0x20, 0x4B, 0x80, 0x60, 0x20, 0xBC, 0x80,
	0x60
];

// song header pointer = 3E 86 ($863E)

const init = [
	// Offset 0x0000008F to 0x000000A3
	0xA9, 0x0F, 0x8D, 0x15, 0x40, 0xA9, 0x00, 0x8D, 0x03, 0x90, 0x8D, 0x00,
	0x02, 0xA9, 0xFF, 0x8D, 0x03, 0x02, 0x8D, 0x04, 0x02
];

const silence = [
	// Offset 0x000000A4 to 0x000000BF
	0xA9, 0x30, 0x8D, 0x05, 0x02, 0x8D, 0x09, 0x02, 0x8D, 0x11, 0x02, 0xA9,
	0x00, 0x8D, 0x19, 0x02, 0x8D, 0x1D, 0x02, 0x8D, 0x21, 0x02, 0xA9, 0x80,
	0x8D, 0x0D, 0x02, 0x60
];

const soundLoad = [
	// Offset 0x000000C0 to 0x00000133
	0xA9, 0x00, 0x8D, 0x15, 0x40, 0xA9, 0x01, 0x8D, 0x00, 0x02, 0x60, 0x8D,
	0x01, 0x02, 0x0A, 0xA8, 0xB9, 0x0D, 0x80, 0x85, 0x00, 0xB9, 0x0E, 0x80,
	0x85, 0x01, 0xA0, 0x00, 0xB1, 0x00, 0x8D, 0x02, 0x02, 0xC8, 0xB1, 0x00,
	0xAA, 0xC8, 0xB1, 0x00, 0x9D, 0x25, 0x02, 0xF0, 0x47, 0xC8, 0xB1, 0x00,
	0x9D, 0x2D, 0x02, 0xC8, 0xB1, 0x00, 0x9D, 0x55, 0x02, 0xC8, 0xB1, 0x00,
	0x9D, 0x45, 0x02, 0xC8, 0xB1, 0x00, 0x9D, 0x35, 0x02, 0xC8, 0xB1, 0x00,
	0x9D, 0x3D, 0x02, 0xA9, 0x01, 0x9D, 0x6D, 0x02, 0x9D, 0x75, 0x02, 0xA9,
	0x00, 0x9D, 0x4D, 0x02, 0x9D, 0x95, 0x02, 0x9D, 0x7D, 0x02, 0x9D, 0x85,
	0x02, 0x9D, 0x9D, 0x02, 0x9D, 0xA5, 0x02, 0x9D, 0xAD, 0x02, 0x9D, 0xB5,
	0x02, 0xC8, 0xCE, 0x02, 0x02, 0xD0, 0xAF, 0x60
];

const playFrame = [
	// Offset 0x00000134 to 0x0000016A
	0xC8, 0xC8, 0xC8, 0xC8, 0xC8, 0x4C, 0xAD, 0x80, 0xAD, 0x00, 0x02, 0xD0,
	0x29, 0x20, 0x24, 0x80, 0xA2, 0x00, 0xBD, 0x25, 0x02, 0x29, 0x01, 0xF0,
	0x15, 0xDE, 0x6D, 0x02, 0xD0, 0x09, 0xBD, 0x75, 0x02, 0x9D, 0x6D, 0x02,
	0x20, 0x2B, 0x81, 0xE0, 0x04, 0xF0, 0x03, 0x20, 0x1E, 0x82, 0xE8, 0xE0,
	0x08, 0xD0, 0xDF, 0x20, 0xA6, 0x83, 0x60
];

const bankingTable = [
	// Offset 0x0000016B to 0x000001AA
	0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x0c, 0x0c, // square 1
    0x00, 0x02, 0x02, 0x03, 0x04, 0x05, 0x0c, 0x0c, // square 2
    0x00, 0x01, 0x03, 0x03, 0x04, 0x05, 0x0c, 0x0c, // triangle
	0x00, 0x01, 0x04, 0x03, 0x04, 0x05, 0x0c, 0x0c, // noise
    0x00, 0x01, 0x02, 0x05, 0x04, 0x05, 0x0c, 0x0c, // dmc
    0x00, 0x01, 0x02, 0x06, 0x04, 0x05, 0x0c, 0x0c, // vrc p1
    0x00, 0x01, 0x02, 0x00, 0x07, 0x05, 0x0c, 0x0c, // vrc p2
    0x00, 0x01, 0x02, 0x00, 0x08, 0x05, 0x0c, 0x0c // vrc saw
];

const fetchByte = [
	// Offset 0x000001AB to 0x0000025A
	0x8A, 0x0A, 0x0A, 0x0A, 0xA8, 0xB9, 0xEB, 0x80, 0x8D, 0xF8, 0x5F, 0xC8,
	0xB9, 0xEB, 0x80, 0x8D, 0xF9, 0x5F, 0xC8, 0xB9, 0xEB, 0x80, 0x8D, 0xFA,
	0x5F, 0xC8, 0xB9, 0xEB, 0x80, 0x8D, 0xFB, 0x5F, 0xC8, 0xB9, 0xEB, 0x80,
	0x8D, 0xFC, 0x5F, 0xC8, 0xB9, 0xEB, 0x80, 0x8D, 0xFD, 0x5F, 0xC8, 0xC8,
	0xB9, 0xEB, 0x80, 0x8D, 0xFF, 0x5F, 0xBD, 0x35, 0x02, 0x85, 0x00, 0xBD,
	0x3D, 0x02, 0x85, 0x01, 0xA0, 0x00, 0xB1, 0x00, 0x10, 0x23, 0xC9, 0xA0,
	0x90, 0x0C, 0x20, 0x05, 0x82, 0xC8, 0xBD, 0x25, 0x02, 0x29, 0x01, 0xD0,
	0xED, 0x60, 0x29, 0x7F, 0x8C, 0x01, 0x02, 0xA8, 0x9D, 0x75, 0x02, 0x9D,
	0x6D, 0x02, 0xAC, 0x01, 0x02, 0xC8, 0x4C, 0x6D, 0x81, 0x8D, 0x02, 0x02,
	0xBD, 0x2D, 0x02, 0xC9, 0x03, 0xD0, 0x06, 0x20, 0xDB, 0x81, 0x4C, 0xC7,
	0x81, 0xAD, 0x02, 0x02, 0x9D, 0x65, 0x02, 0x9D, 0xC5, 0x02, 0xC8, 0xB1,
	0x00, 0x9D, 0x5D, 0x02, 0x9D, 0xBD, 0x02, 0xA9, 0x00, 0x9D, 0x4D, 0x02,
	0x9D, 0x95, 0x02, 0x9D, 0xB5, 0x02, 0x9D, 0xA5, 0x02, 0x20, 0xF1, 0x81,
	0xA9, 0x00, 0x9D, 0x4D, 0x02, 0xC8, 0x98, 0x18, 0x7D, 0x35, 0x02, 0x9D,
	0x35, 0x02, 0x90, 0x03, 0xFE, 0x3D, 0x02, 0x60
];

const doNoise = [
	// Offset 0x0000025B to 0x00000270
	0xAD, 0x02, 0x02, 0x29, 0x10, 0xF0, 0x08, 0xAD, 0x02, 0x02, 0x09, 0x80,
	0x8D, 0x02, 0x02, 0xAD, 0x02, 0x02, 0x9D, 0x5D, 0x02, 0x60
];

const checkRest = [
	// Offset 0x00000271 to 0x00000284
	0xB1, 0x00, 0xD0, 0x07, 0xBD, 0x25, 0x02, 0x09, 0x02, 0xD0, 0x05, 0xBD,
	0x25, 0x02, 0x29, 0xFD, 0x9D, 0x25, 0x02, 0x60
];

const opcodeLauncher = [
	// Offset 0x00000285 to 0x0000029D
	0x8C, 0x01, 0x02, 0x38, 0xE9, 0xA0, 0x0A, 0xA8, 0xB9, 0x47, 0x84, 0x85,
	0x02, 0xB9, 0x48, 0x84, 0x85, 0x03, 0xAC, 0x01, 0x02, 0xC8, 0x6C, 0x02,
	0x00
];

const setTempPorts = [
	// Offset 0x0000029E to 0x000002BF
	0xBD, 0x2D, 0x02, 0x0A, 0x0A, 0xA8, 0x20, 0x14, 0x83, 0xE0, 0x03, 0xF0,
	0x03, 0x20, 0x75, 0x82, 0xA9, 0x08, 0x99, 0x06, 0x02, 0xBD, 0x5D, 0x02,
	0x99, 0x07, 0x02, 0xBD, 0x65, 0x02, 0x99, 0x08, 0x02, 0x60
];


let arpPointerAdr = wordToNum(0x27, 0x86)

/*
const setArp = [
	// Offset 0x000002C0 to 0x000002F4
	0x0A, 0xA8, 0xB9, 0x27, 0x86, 0x85, 0x00, 0xB9, 0x28, 0x86, 0x85, 0x01,
	0xBC, 0xA5, 0x02, 0xB1, 0x00, 0xC9, 0xFF, 0xD0, 0x08, 0xA9, 0x00, 0x9D,
	0xA5, 0x02, 0x4C, 0x4C, 0x82, 0xB1, 0x00, 0x9D, 0x65, 0x02, 0x9D, 0xC5,
	0x02, 0xC8, 0xB1, 0x00, 0x9D, 0x5D, 0x02, 0x9D, 0xBD, 0x02, 0xFE, 0xA5,
	0x02, 0xFE, 0xA5, 0x02, 0x60
];

*/

function setArp(pointer) {
  const arp1 = [0x0A, 0xA8, 0xB9]
  const arp2 = [0x85, 0x00, 0xB9]
  const arp3 = [0x85, 0x01,
	0xBC, 0xA5, 0x02, 0xB1, 0x00, 0xC9, 0xFF, 0xD0, 0x08, 0xA9, 0x00, 0x9D,
	0xA5, 0x02, 0x4C, 0x4C, 0x82, 0xB1, 0x00, 0x9D, 0x65, 0x02, 0x9D, 0xC5,
	0x02, 0xC8, 0xB1, 0x00, 0x9D, 0x5D, 0x02, 0x9D, 0xBD, 0x02, 0xFE, 0xA5,
	0x02, 0xFE, 0xA5, 0x02, 0x60]
  return arp1.concat(fmtWord(pointer), arp2, fmtWord(pointer+1), arp3)
}

/*
const setStreamPitch = [
	// Offset 0x000002F5 to 0x0000036F
	0x8C, 0x01, 0x02, 0xBD, 0x9D, 0x02, 0xF0, 0x03, 0x20, 0x40, 0x82, 0xBD,
	0x8D, 0x02, 0x0A, 0xA8, 0xB9, 0xB8, 0x85, 0x85, 0x00, 0xB9, 0xB9, 0x85,
	0x85, 0x01, 0xBC, 0x95, 0x02, 0xB1, 0x00, 0xC9, 0xFF, 0xD0, 0x08, 0xA9,
	0x00, 0x9D, 0x95, 0x02, 0x4C, 0x8F, 0x82, 0x38, 0xE9, 0x40, 0x30, 0x1B,
	0x18, 0x7D, 0xBD, 0x02, 0x9D, 0x5D, 0x02, 0xBD, 0xC5, 0x02, 0x9D, 0x65,
	0x02, 0x90, 0x35, 0xBD, 0xC5, 0x02, 0x9D, 0x65, 0x02, 0xFE, 0x65, 0x02,
	0x4C, 0xE9, 0x82, 0x8D, 0x02, 0x02, 0xCE, 0x02, 0x02, 0xA9, 0xFF, 0x38,
	0xED, 0x02, 0x02, 0x8D, 0x02, 0x02, 0xBD, 0xBD, 0x02, 0xED, 0x02, 0x02,
	0x9D, 0x5D, 0x02, 0xBD, 0xC5, 0x02, 0x9D, 0x65, 0x02, 0xB0, 0x09, 0xBD,
	0xC5, 0x02, 0x9D, 0x65, 0x02, 0xDE, 0x65, 0x02, 0xAC, 0x01, 0x02, 0xFE,
	0x95, 0x02, 0x60
];

*/

let pitchEnv = wordToNum(0xb8, 0x85)

function setStreamPitch(pitchEnv) {
  const pitch1 = [0x8C, 0x01, 0x02, 0xBD, 0x9D, 0x02, 0xF0, 0x03, 0x20, 0x40, 0x82, 0xBD,
	0x8D, 0x02, 0x0A, 0xA8, 0xB9]
  const pitch2 = [0x85,	0x00, 0xB9]
  const pitch3 = [0x85, 0x01, 0xBC, 0x95, 0x02, 0xB1, 0x00, 0xC9, 0xFF, 0xD0, 0x08, 0xA9,
	0x00, 0x9D, 0x95, 0x02, 0x4C, 0x8F, 0x82, 0x38, 0xE9, 0x40, 0x30, 0x1B,
	0x18, 0x7D, 0xBD, 0x02, 0x9D, 0x5D, 0x02, 0xBD, 0xC5, 0x02, 0x9D, 0x65,
	0x02, 0x90, 0x35, 0xBD, 0xC5, 0x02, 0x9D, 0x65, 0x02, 0xFE, 0x65, 0x02,
	0x4C, 0xE9, 0x82, 0x8D, 0x02, 0x02, 0xCE, 0x02, 0x02, 0xA9, 0xFF, 0x38,
	0xED, 0x02, 0x02, 0x8D, 0x02, 0x02, 0xBD, 0xBD, 0x02, 0xED, 0x02, 0x02,
	0x9D, 0x5D, 0x02, 0xBD, 0xC5, 0x02, 0x9D, 0x65, 0x02, 0xB0, 0x09, 0xBD,
	0xC5, 0x02, 0x9D, 0x65, 0x02, 0xDE, 0x65, 0x02, 0xAC, 0x01, 0x02, 0xFE,
	0x95, 0x02, 0x60]
  return pitch1.concat(
    fmtWord(pitchEnv), pitch2, fmtWord(pitchEnv+1), pitch3)
}

let dutyEnv = wordToNum(0x05, 0x86)

/*
const setDutyEnv = [
	// Offset 0x00000370 to 0x00000393
	0x0A, 0xA8, 0xB9, 0x05, 0x86, 0x85, 0x00, 0xB9, 0x06, 0x86, 0x85, 0x01,
	0xBC, 0xB5, 0x02, 0xB1, 0x00, 0xC9, 0xFF, 0xD0, 0x06, 0xDE, 0xB5, 0x02,
	0x4C, 0xFC, 0x82, 0xB1, 0x00, 0x9D, 0x55, 0x02, 0xFE, 0xB5, 0x02, 0x60
];

*/

function setDutyEnv(pointer) {
  const duty1 = [0x0A, 0xA8, 0xB9]
  const duty2 = [0x85, 0x00, 0xB9]
  const duty3 = [0x85, 0x01,
	0xBC, 0xB5, 0x02, 0xB1, 0x00, 0xC9, 0xFF, 0xD0, 0x06, 0xDE, 0xB5, 0x02,
	0x4C, 0xFC, 0x82, 0xB1, 0x00, 0x9D, 0x55, 0x02, 0xFE, 0xB5, 0x02, 0x60]
  console.log("[setDutyEnv] pointer:", hex(pointer))
  return duty1.concat(
    fmtWord(pointer), duty2, fmtWord(pointer+1), duty3)
}

const veTableAdr = 0x856c

function setStreamVolume(pointer) {
  const vol1 = [0x8C, 0x01, 0x02, 0xBD, 0xAD, 0x02, 0xF0, 0x03, 0x20, 0xF0, 0x82, 0xBD,
	0x45, 0x02, 0x0A, 0xA8, 0xB9]
  const vol2 = [0x85, 0x00, 0xB9]
  const vol3 = [0x85, 0x01, 0xBC, 0x4D, 0x02, 0xB1, 0x00, 0xC9, 0xFF, 0xD0, 0x06, 0xDE,
	0x4D, 0x02, 0x4C, 0x2E, 0x83, 0x8D, 0x02, 0x02, 0xE0, 0x07, 0xF0, 0x15,
	0xE0, 0x02, 0xD0, 0x19, 0xBD, 0x25, 0x02, 0xF0, 0x05, 0xAD, 0x02, 0x02,
	0xD0, 0x0F, 0xA9, 0x80, 0x8D, 0x02, 0x02, 0x30, 0x1D, 0xAD, 0x02, 0x02,
	0x29, 0x3F, 0x4C, 0x76, 0x83, 0xBD, 0x55, 0x02, 0x29, 0xF0, 0x0D, 0x02,
	0x02, 0x8D, 0x02, 0x02, 0xBD, 0x25, 0x02, 0xD0, 0x05, 0xA9, 0x30, 0x8D,
	0x02, 0x02, 0xAD, 0x02, 0x02, 0xAC, 0x01, 0x02, 0x99, 0x05, 0x02, 0xFE,
	0x4D, 0x02, 0xBD, 0x25, 0x02, 0x29, 0x02, 0xF0, 0x1C, 0xBD, 0x2D, 0x02,
	0xC9, 0x02, 0xF0, 0x0B, 0xBD, 0x2D, 0x02, 0xC9, 0x07, 0xF0, 0x09, 0xA9,
	0x30, 0xD0, 0x07, 0xA9, 0x80, 0x4C, 0xA2, 0x83, 0xA9, 0x00, 0x99, 0x05,
	0x02, 0x60]
  return vol1.concat(
    fmtWord(pointer), vol2, fmtWord(pointer+1), vol3)
}

/*
const setStreamVolume = [
	// Offset 0x00000394 to 0x00000425
	0x8C, 0x01, 0x02, 0xBD, 0xAD, 0x02, 0xF0, 0x03, 0x20, 0xF0, 0x82, 0xBD,
	0x45, 0x02, 0x0A, 0xA8, 0xB9, 0x6C, 0x85, 0x85, 0x00, 0xB9, 0x6D, 0x85,
	0x85, 0x01, 0xBC, 0x4D, 0x02, 0xB1, 0x00, 0xC9, 0xFF, 0xD0, 0x06, 0xDE,
	0x4D, 0x02, 0x4C, 0x2E, 0x83, 0x8D, 0x02, 0x02, 0xE0, 0x07, 0xF0, 0x15,
	0xE0, 0x02, 0xD0, 0x19, 0xBD, 0x25, 0x02, 0xF0, 0x05, 0xAD, 0x02, 0x02,
	0xD0, 0x0F, 0xA9, 0x80, 0x8D, 0x02, 0x02, 0x30, 0x1D, 0xAD, 0x02, 0x02,
	0x29, 0x3F, 0x4C, 0x76, 0x83, 0xBD, 0x55, 0x02, 0x29, 0xF0, 0x0D, 0x02,
	0x02, 0x8D, 0x02, 0x02, 0xBD, 0x25, 0x02, 0xD0, 0x05, 0xA9, 0x30, 0x8D,
	0x02, 0x02, 0xAD, 0x02, 0x02, 0xAC, 0x01, 0x02, 0x99, 0x05, 0x02, 0xFE,
	0x4D, 0x02, 0xBD, 0x25, 0x02, 0x29, 0x02, 0xF0, 0x1C, 0xBD, 0x2D, 0x02,
	0xC9, 0x02, 0xF0, 0x0B, 0xBD, 0x2D, 0x02, 0xC9, 0x07, 0xF0, 0x09, 0xA9,
	0x30, 0xD0, 0x07, 0xA9, 0x80, 0x4C, 0xA2, 0x83, 0xA9, 0x00, 0x99, 0x05,
	0x02, 0x60
];
*/

const setApu = [
	// Offset 0x00000426 to 0x000004C6
	0xAD, 0x05, 0x02, 0x8D, 0x00, 0x40, 0xAD, 0x06, 0x02, 0x8D, 0x01, 0x40,
	0xAD, 0x07, 0x02, 0x8D, 0x02, 0x40, 0xAD, 0x08, 0x02, 0xCD, 0x03, 0x02,
	0xF0, 0x06, 0x8D, 0x03, 0x40, 0x8D, 0x03, 0x02, 0xAD, 0x09, 0x02, 0x8D,
	0x04, 0x40, 0xAD, 0x0A, 0x02, 0x8D, 0x05, 0x40, 0xAD, 0x0B, 0x02, 0x8D,
	0x06, 0x40, 0xAD, 0x0C, 0x02, 0xCD, 0x04, 0x02, 0xF0, 0x06, 0x8D, 0x07,
	0x40, 0x8D, 0x04, 0x02, 0xAD, 0x0D, 0x02, 0x8D, 0x08, 0x40, 0xAD, 0x0F,
	0x02, 0x8D, 0x0A, 0x40, 0xAD, 0x10, 0x02, 0x8D, 0x0B, 0x40, 0xAD, 0x11,
	0x02, 0x8D, 0x0C, 0x40, 0xAD, 0x13, 0x02, 0x8D, 0x0E, 0x40, 0xAD, 0x14,
	0x02, 0x8D, 0x0F, 0x40, 0xAD, 0x19, 0x02, 0x8D, 0x00, 0x90, 0xAD, 0x1B,
	0x02, 0x8D, 0x01, 0x90, 0xAD, 0x1C, 0x02, 0x09, 0x80, 0x8D, 0x02, 0x90,
	0xAD, 0x1D, 0x02, 0x8D, 0x00, 0xA0, 0xAD, 0x1F, 0x02, 0x8D, 0x01, 0xA0,
	0xAD, 0x20, 0x02, 0x09, 0x80, 0x8D, 0x02, 0xA0, 0xAD, 0x21, 0x02, 0x8D,
	0x00, 0xB0, 0xAD, 0x23, 0x02, 0x8D, 0x01, 0xB0, 0xAD, 0x24, 0x02, 0x09,
	0x80, 0x8D, 0x02, 0xB0, 0x60
];


// opcodes

const endSound = [
	// Offset 0x000004C7 to 0x000004FB
	0x63, 0x84, 0x7C, 0x84, 0x91, 0x84, 0x9C, 0x84, 0xA2, 0x84, 0xA8, 0x84,
	0xB5, 0x84, 0xBB, 0x84, 0xC8, 0x84, 0xE8, 0x84, 0x42, 0x85, 0x4D, 0x85,
	0x58, 0x85, 0x63, 0x85, 0xBD, 0x25, 0x02, 0x29, 0xFE, 0x9D, 0x25, 0x02,
	0xBD, 0x2D, 0x02, 0xC9, 0x02, 0xF0, 0x04, 0xA9, 0x30, 0xD0, 0x02, 0xA9,
	0x80, 0x9D, 0x55, 0x02, 0x60
];

const infiniteLoop = [
	// Offset 0x000004FC to 0x00000510
	0xB1, 0x00, 0x9D, 0x35, 0x02, 0xC8, 0xB1, 0x00, 0x9D, 0x3D, 0x02, 0x85,
	0x01, 0xBD, 0x35, 0x02, 0x85, 0x00, 0xA0, 0xFF, 0x60
];

const volEnv = [
	// Offset 0x00000511 to 0x0000051B
	0xB1, 0x00, 0x9D, 0x45, 0x02, 0xA9, 0x00, 0x9D, 0x4D, 0x02, 0x60
];

const duty = [
	// Offset 0x0000051C to 0x00000521
	0xB1, 0x00, 0x9D, 0x55, 0x02, 0x60
];

const loop1Counter = [
	// Offset 0x00000522 to 0x00000527
	0xB1, 0x00, 0x9D, 0x7D, 0x02, 0x60
];

const loop1 = [
	// Offset 0x00000528 to 0x00000534
	0xDE, 0x7D, 0x02, 0xBD, 0x7D, 0x02, 0xF0, 0x03, 0x4C, 0x7C, 0x84, 0xC8,
	0x60
];

const loop2Counter = [
	// Offset 0x00000535 to 0x0000053A
	0xB1, 0x00, 0x9D, 0x85, 0x02, 0x60
];

const loop2 = [
	// Offset 0x0000053B to 0x00000547
	0xDE, 0x85, 0x02, 0xBD, 0x85, 0x02, 0xF0, 0x03, 0x4C, 0x7C, 0x84, 0xC8,
	0x60
];

const playSample = [
	// Offset 0x00000548 to 0x00000567
	0xA9, 0x0F, 0x8D, 0x15, 0x40, 0xB1, 0x00, 0x8D, 0x12, 0x40, 0xC8, 0xB1,
	0x00, 0x8D, 0x13, 0x40, 0xA9, 0x0F, 0x8D, 0x10, 0x40, 0xA9, 0x40, 0x8D,
	0x11, 0x40, 0xA9, 0x1F, 0x8D, 0x15, 0x40, 0x60
];

const switchBank = [
	// Offset 0x00000568 to 0x000005C1
	0xB1, 0x00, 0xC9, 0x01, 0xF0, 0x1C, 0xC9, 0x02, 0xF0, 0x1F, 0xC9, 0x03,
	0xF0, 0x22, 0xC9, 0x04, 0xF0, 0x25, 0xC9, 0x05, 0xF0, 0x28, 0xC9, 0x06,
	0xF0, 0x2B, 0xC9, 0x07, 0xF0, 0x2E, 0xC9, 0x08, 0xF0, 0x31, 0xC8, 0xB1,
	0x00, 0x8D, 0xF8, 0x5F, 0x60, 0xC8, 0xB1, 0x00, 0x8D, 0xF9, 0x5F, 0x60,
	0xC8, 0xB1, 0x00, 0x8D, 0xFA, 0x5F, 0x60, 0xC8, 0xB1, 0x00, 0x8D, 0xFB,
	0x5F, 0x60, 0xC8, 0xB1, 0x00, 0x8D, 0xFC, 0x5F, 0x60, 0xC8, 0xB1, 0x00,
	0x8D, 0xFD, 0x5F, 0x60, 0xC8, 0xB1, 0x00, 0x8D, 0xFE, 0x5F, 0x60, 0xC8,
	0xB1, 0x00, 0x8D, 0xFF, 0x5F, 0x60
];

const changePitchEnv = [
	// Offset 0x000005C2 to 0x000005CC
	0xB1, 0x00, 0x9D, 0x8D, 0x02, 0xA9, 0x00, 0x9D, 0x95, 0x02, 0x60
];

const changeArp = [
	// Offset 0x000005CD to 0x000005D7
	0xB1, 0x00, 0x9D, 0x9D, 0x02, 0xA9, 0x00, 0x9D, 0xA5, 0x02, 0x60
];

const changeDutyEnv = [
	// Offset 0x000005D8 to 0x000005E2
	0xB1, 0x00, 0x9D, 0xAD, 0x02, 0xA9, 0x00, 0x9D, 0xB5, 0x02, 0x60
];

const changeDuration = [
	// Offset 0x000005E3 to 0x000005EB
	0xB1, 0x00, 0x9D, 0x75, 0x02, 0x9D, 0x6D, 0x02, 0x60
];

// table of pointers to volume envelope sequences

const defaultVolEnvelopes = [
  [0x00, 0xFF], [0x01, 0xFF], [0x02, 0xFF], [0x03, 0xFF], [0x04, 0xFF], [0x05, 0xFF],
  [0x06, 0xFF], [0x07, 0xFF], [0x08, 0xFF], [0x09, 0xFF], [0x0a, 0xFF], [0x0b, 0xFF],
  [0x0c, 0xFF], [0x0d, 0xFF], [0x0e, 0xFF], [0x0f, 0xFF],
  [0x0E, 0x09, 0x08, 0x06, 0x04, 0x03, 0x02, 0x01, 0x00, 0xFF]
]

export let currentVolEnvelopes = defaultVolEnvelopes

let volumeEnvelopes = [].concat(...defaultVolEnvelopes)

export function resetVolEnvelopes() {
   currentVolEnvelopes = [
  [0x00, 0xFF], [0x01, 0xFF], [0x02, 0xFF], [0x03, 0xFF], [0x04, 0xFF], [0x05, 0xFF],
  [0x06, 0xFF], [0x07, 0xFF], [0x08, 0xFF], [0x09, 0xFF], [0x0a, 0xFF], [0x0b, 0xFF],
  [0x0c, 0xFF], [0x0d, 0xFF], [0x0e, 0xFF], [0x0f, 0xFF],
  [0x0E, 0x09, 0x08, 0x06, 0x04, 0x03, 0x02, 0x01, 0x00, 0xFF]
]
}

export function addVolEnvelope(envelope) {
  envelope.push(0xff)
  currentVolEnvelopes.push(envelope)
  volumeEnvelopes = [].concat(...currentVolEnvelopes)
  pitchEnvelopes = [].concat(...currentPitchEnvelopes)
  dutyEnvelopes = [].concat(...currentDutyEnvelopes)
  arps = [].concat(...currentArps)
  vePointers = volEnvPointers(currentVolEnvelopes)
  songHeaderAdr = fmtWord(veTableAdr + volumeEnvelopes.length + vePointers.length + pitchEnvelopes.length + pePointers.length + dutyEnvelopes.length + dePointers.length + arps.length + aPointers.length)
  pitchEnv = veTableAdr + volumeEnvelopes.length + vePointers.length
  dutyEnv = pitchEnv + pitchEnvelopes.length + pePointers.length
  //s1 = wordToNum(songHeaderAdr[0], songHeaderAdr[1]) + 36
}

function volEnvPointers(envelopes) {
  let pointers = []
  let index = veTableAdr
  for (let i = 0; i < envelopes.length; i++) {
    // address pointer locations need to account for the length of the table itself
    pointers = pointers.concat(fmtWord(index + (envelopes.length * 2)))
    index += envelopes[i].length
  }
  
  return pointers
}

let vePointers = volEnvPointers(defaultVolEnvelopes)

// pitch envelopes

pitchEnv = veTableAdr + volumeEnvelopes.length + vePointers.length

const defaultPitchEnvelopes = [
  [0x40, 0xFF],
  [0x40, 0x40, 0x41, 0x41, 0x41, 0x41, 0x42, 0x42, 0x42, 0x42, 0x41,
   0x41, 0x41, 0x41, 0x40, 0x40, 0x40, 0x40, 0x3F, 0x3F, 0x3F, 0x3F,
   0x3E, 0x3E, 0x3E, 0x3E, 0x3F, 0x3F, 0x3F, 0x3F, 0x40, 0x40, 0xFF],
  [0x40, 0x41, 0x42, 0x43, 0x44, 0x43, 0x42, 0x41, 0x40, 0x3F, 0x3E,
   0x3D, 0x3C, 0x3D, 0x3E, 0x3F, 0xFF],
  [0x40, 0x42, 0x44, 0x46, 0x48, 0x46, 0x44, 0x42,
   0x40, 0x3E, 0x3C, 0x3A, 0x38, 0x3A, 0x3C, 0x3E, 0xFF]
]

export let currentPitchEnvelopes = defaultPitchEnvelopes

let pitchEnvelopes = [].concat(...defaultPitchEnvelopes)

export function resetPitchEnvelopes() {
   currentPitchEnvelopes = [
  [0x40, 0xFF],
  [0x40, 0x40, 0x41, 0x41, 0x41, 0x41, 0x42, 0x42, 0x42, 0x42, 0x41,
   0x41, 0x41, 0x41, 0x40, 0x40, 0x40, 0x40, 0x3F, 0x3F, 0x3F, 0x3F,
   0x3E, 0x3E, 0x3E, 0x3E, 0x3F, 0x3F, 0x3F, 0x3F, 0x40, 0x40, 0xFF],
  [0x40, 0x41, 0x42, 0x43, 0x44, 0x43, 0x42, 0x41, 0x40, 0x3F, 0x3E,
   0x3D, 0x3C, 0x3D, 0x3E, 0x3F, 0xFF],
  [0x40, 0x42, 0x44, 0x46, 0x48, 0x46, 0x44, 0x42,
   0x40, 0x3E, 0x3C, 0x3A, 0x38, 0x3A, 0x3C, 0x3E, 0xFF]
]
}

export function addPitchEnvelope(envelope) {
  envelope.push(0xff)
  currentPitchEnvelopes.push(envelope)
  volumeEnvelopes = [].concat(...currentVolEnvelopes)
  pitchEnvelopes = [].concat(...currentPitchEnvelopes)
  dutyEnvelopes = [].concat(...currentDutyEnvelopes)
  arps = [].concat(...currentArps)
  vePointers = volEnvPointers(currentVolEnvelopes)
  pePointers = pitchEnvPointers(currentPitchEnvelopes)
  songHeaderAdr = fmtWord(veTableAdr + volumeEnvelopes.length + vePointers.length + pitchEnvelopes.length + pePointers.length + dutyEnvelopes.length + dePointers.length + arps.length + aPointers.length)
  pitchEnv = veTableAdr + volumeEnvelopes.length + vePointers.length
  dutyEnv = pitchEnv + pitchEnvelopes.length + pePointers.length
  //s1 = wordToNum(songHeaderAdr[0], songHeaderAdr[1]) + 36
}

function pitchEnvPointers(envelopes) {
  let pointers = []
  let index = veTableAdr + volumeEnvelopes.length + vePointers.length
  for (let i = 0; i < envelopes.length; i++) {
    // address pointer locations need to account for the length of the table itself
    pointers = pointers.concat(fmtWord(index + (envelopes.length * 2)))
    index += envelopes[i].length
  }
  //console.log("pitchEnvPointers:", pointers)
  return pointers
}

let pePointers = pitchEnvPointers(defaultPitchEnvelopes)

// duty envelopes

const defaultDutyEnvelopes = [
  [0x00, 0xFF],
  [0x30, 0x70, 0xB0, 0xF0, 0x70, 0xB0, 0x70, 0xB0, 0x70, 0xF0, 0xFF],
  [0x30, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70,
	0x70, 0x70, 0xFF]
]

dutyEnv = veTableAdr + volumeEnvelopes.length + vePointers.length + pitchEnvelopes.length + pePointers.length

export let currentDutyEnvelopes = defaultDutyEnvelopes

let dutyEnvelopes = [].concat(...defaultDutyEnvelopes)

export function resetDutyEnvelopes() {
   currentDutyEnvelopes = [
  [0x00, 0xFF],
  [0x30, 0x70, 0xB0, 0xF0, 0x70, 0xB0, 0x70, 0xB0, 0x70, 0xF0, 0xFF],
  [0x30, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70,
	0x70, 0x70, 0xFF]
]
}

export function addDutyEnvelope(envelope) {
  envelope.push(0xff)
  currentDutyEnvelopes.push(envelope)
  volumeEnvelopes = [].concat(...currentVolEnvelopes)
  pitchEnvelopes = [].concat(...currentPitchEnvelopes)
  dutyEnvelopes = [].concat(...currentDutyEnvelopes)
  arps = [].concat(...currentArps)
  vePointers = volEnvPointers(currentVolEnvelopes)
  pePointers = pitchEnvPointers(currentPitchEnvelopes)
  dePointers = dutyEnvPointers(currentDutyEnvelopes)
dutyEnv = veTableAdr + volumeEnvelopes.length + vePointers.length + pitchEnvelopes.length + pePointers.length
  arpPointerAdr = veTableAdr + volumeEnvelopes.length + vePointers.length + pitchEnvelopes.length + pePointers.length + dutyEnvelopes.length + dePointers.length
  songHeaderAdr = fmtWord(veTableAdr + volumeEnvelopes.length + vePointers.length + pitchEnvelopes.length + pePointers.length + dutyEnvelopes.length + dePointers.length + arps.length + aPointers.length)
  //s1 = wordToNum(songHeaderAdr[0], songHeaderAdr[1]) + 36
}

function dutyEnvPointers(envelopes) {
  let pointers = []
  let index = veTableAdr + volumeEnvelopes.length + vePointers.length + pitchEnvelopes.length + pePointers.length
  console.log("index:", hex(index))
  for (let i = 0; i < envelopes.length; i++) {
    // address pointer locations need to account for the length of the table itself
    pointers = pointers.concat(fmtWord(index + (envelopes.length * 2)))
    index += envelopes[i].length
  }
  //console.log("dutyEnvPointers:", pointers)
  //console.log("veTableAdr:", hex(veTableAdr))
  return pointers
}

let dePointers = dutyEnvPointers(defaultDutyEnvelopes)

const defaultArps = [
  [0x00, 0x00, 0xFF],
  [0x00, 0xFD, 0x00, 0xD6, 0x00, 0xA9, 0xFF],
  [0x01, 0x7C, 0x01, 0x3F, 0x00, 0xFD, 0xFF]
]

arpPointerAdr = veTableAdr + volumeEnvelopes.length + vePointers.length + pitchEnvelopes.length + pePointers.length + dutyEnvelopes.length + dePointers.length

export let currentArps = defaultArps

let arps = [].concat(...defaultArps)

export function resetArps() {
   currentArps = [
  [0x00, 0x00, 0xFF],
  [0x00, 0xFD, 0x00, 0xD6, 0x00, 0xA9, 0xFF],
  [0x01, 0x7C, 0x01, 0x3F, 0x00, 0xFD, 0xFF]
]
}

export function addArp(envelope) {
  envelope.push(0xff)
  currentArps.push(envelope)
  volumeEnvelopes = [].concat(...currentVolEnvelopes)
  pitchEnvelopes = [].concat(...currentPitchEnvelopes)
  dutyEnvelopes = [].concat(...currentDutyEnvelopes)
  arps = [].concat(...currentArps)
  vePointers = volEnvPointers(currentVolEnvelopes)
  pePointers = pitchEnvPointers(currentPitchEnvelopes)
  dePointers = dutyEnvPointers(currentDutyEnvelopes)
  aPointers = arpPointers(currentArps)
pitchEnvelopes.length + pePointers.length + dutyEnvelopes.length + dePointers.length
dutyEnv = veTableAdr + volumeEnvelopes.length + vePointers.length + pitchEnvelopes.length + pePointers.length
arpPointerAdr = veTableAdr + volumeEnvelopes.length + vePointers.length + pitchEnvelopes.length + pePointers.length + dutyEnvelopes.length + dePointers.length
  songHeaderAdr = fmtWord(veTableAdr + volumeEnvelopes.length + vePointers.length + pitchEnvelopes.length + pePointers.length + dutyEnvelopes.length + dePointers.length + arps.length + aPointers.length)
  //s1 = wordToNum(songHeaderAdr[0], songHeaderAdr[1]) + 36
}

function arpPointers(envelopes) {
  let pointers = []
  let index = veTableAdr + volumeEnvelopes.length + vePointers.length + pitchEnvelopes.length + pePointers.length + dutyEnvelopes.length + dePointers.length
  for (let i = 0; i < envelopes.length; i++) {
    // address pointer locations need to account for the length of the table itself
    pointers = pointers.concat(fmtWord(index + (envelopes.length * 2)))
    index += envelopes[i].length
  }
  //console.log("arpPointers:", pointers)
  return pointers
}

let aPointers = arpPointers(defaultArps)

let songHeaderAdr = fmtWord(veTableAdr + volumeEnvelopes.length + vePointers.length + pitchEnvelopes.length + pePointers.length + dutyEnvelopes.length + dePointers.length + arps.length + aPointers.length)

console.log("veTableAdr:", hex(veTableAdr))

console.log(songHeaderAdr)

// songheaderadr = $862C

//export let s1 = wordToNum(songHeaderAdr[0], songHeaderAdr[1]) + 36
// bank-switching driver will put it at $9000, (start of page 1)
export let s1 = 0x9000
export let s2 = 0x9000
export let s3 = 0xA000
export let s4 = 0xA000
export let s5 = 0xB000
export let s6 = 0xB000
export let s7 = 0xC000
export let s8 = 0xC000

// Song header

let numStreams = 8;
const SQUARE_1 = 0;
const SQUARE_2 = 1;
const TRIANGLE = 2;
const NOISE = 3;
const DPCM = 4;
const VRC6P1 = 5
const VRC6P2 = 6
const VRC6SAW = 7

// Song header format:
// 1. Stream
// 2. Status (0 = disabled, 1 = enabled)
// 3. Channel number
// 4. Initial duty
// 5. Volume envelope
// 6. Pointer to stream (2 bytes)

let streams = [];
let songHeader = []
let square1 = [];
let square2 = [];
let tri = [];
let noise = [];
let dpcm = [];

let header = nsfFormat.concat(version, totalSongs, startingSong, loadAdr,
  initAdr, playAdr, songName, artist, copyright, ntscSpeed, banking,
  palSpeed, playMode, expansionAudio, prgLength, 0, 0, 0,)

export let nsfDriver = []

function hex(n) {
    return "$" + (n).toString(16);
}

function align64(n) {
  let r = 0
  while (r < n) {
    r += 64
  }
  return r
}

function rom2sampleAdr(adr) {
  return (adr / 64) - 0x282
}

export function assembleDriver(sq1, sq2, t, n, d, p1, p2, saw) {
  streams = [
    SQUARE_1, 1, SQUARE_1, 0xB0, 0x00, fmtWord(s1)[0], fmtWord(s1)[1],
    SQUARE_2, 1, SQUARE_2, 0x30, 0x00, fmtWord(s2)[0], fmtWord(s2)[1],
    TRIANGLE, 1, TRIANGLE, 0x81, 0x01, fmtWord(s3)[0], fmtWord(s3)[1],
    NOISE, 1, NOISE, 0x1E, 0x10, fmtWord(s4)[0], fmtWord(s4)[1],
    DPCM, 1, DPCM, 0x00, 0x10, fmtWord(s5)[0], fmtWord(s5)[1],
    VRC6P1, 1, VRC6P1, 0x0f, 0x0f, fmtWord(s6)[0], fmtWord(s6)[1],
    VRC6P2, 1, VRC6P2, 0x0f, 0x0f, fmtWord(s7)[0], fmtWord(s7)[1],
    VRC6SAW, 1, VRC6SAW, 0x0f, 0x0f, fmtWord(s8)[0], fmtWord(s8)[1]
  ];
  pePointers = pitchEnvPointers(currentPitchEnvelopes)
  dePointers = dutyEnvPointers(currentDutyEnvelopes)
  //console.log("dePointers:", dePointers)
  aPointers = arpPointers(currentArps)
  songHeader = [numStreams].concat(streams);
  const baseDriver = header.concat(load, songHeaderAdr, init, silence, soundLoad, playFrame, bankingTable, fetchByte, doNoise, checkRest, opcodeLauncher, setTempPorts, setArp(arpPointerAdr), setStreamPitch(pitchEnv), setDutyEnv(dutyEnv), setStreamVolume(veTableAdr), setApu, endSound, infiniteLoop, volEnv, duty, loop1Counter, loop1, loop2Counter, loop2, playSample, switchBank, changePitchEnv, changeArp, changeDutyEnv, changeDuration, vePointers, volumeEnvelopes, pePointers, pitchEnvelopes, dePointers, dutyEnvelopes, aPointers, arps, songHeader)
  // $1080 in the file is $9000 in the CPU address space
  const baseDriverPadding = new Array(0x1080 - baseDriver.length).fill(0)
//console.log(baseDriverPadding)
  const sq1Padding = new Array(0x2080 - (0x1080 + sq1.length)).fill(0)
  const sq2Padding = new Array(0x3080 - (0x2080 + sq2.length)).fill(0)
  const tPadding = new Array(0x4080 - (0x3080 + t.length)).fill(0)
  const nPadding = new Array(0x5080 - (0x4080 + n.length)).fill(0)
  const dPadding = new Array(0x6080 - (0x5080 + d.length)).fill(0)
  const p1Padding = new Array(0x7080 - (0x6080 + p1.length)).fill(0)
  const p2Padding = new Array(0x8080 - (0x7080 + p2.length)).fill(0)
  const sawPadding = new Array(0x9080 - (0x8080 + saw.length)).fill(0)
  const driverAndData = baseDriver.concat(baseDriverPadding, sq1, sq1Padding, sq2, sq2Padding, t, tPadding, n, nPadding, d, dPadding, p1, p1Padding, p2, p2Padding, saw, sawPadding)
  const dataPadding = new Array(0xC080 - driverAndData.length).fill(0)
  let sampleSegment = []
  let sampleAdr = 0xc080
  for (let i = 0; i < samples.length; i++) {
    sampleSegment = sampleSegment.concat(Array.from(samples[i].bytes))
    sampleSegment = sampleSegment.concat(
      new Array(align64(sampleSegment.length) - sampleSegment.length).fill(0))
    //console.log("Sample " + i + " at " + hex(sampleAdr) + " ( sampleAdr " + hex(rom2sampleAdr(sampleAdr)) + " )")
    sampleAdr += align64(sampleSegment.length)
  }
  //console.log(sampleSegment)
  nsfDriver = driverAndData.concat(dataPadding, sampleSegment)
}

