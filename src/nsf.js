// convert number to little-endian word as 2-element array
function fmtWord(n) {
  return [parseInt((n).toString(16).slice(2), 16),
          parseInt((n).toString(16).slice(0, 2), 16)];
}

// do the opposite
function wordToNum(lo, hi) {
  return (hi << 8) + lo
}

const nsfFormat = [0x4e, 0x45, 0x53, 0x4d, 0x1a]
const version = 1
let totalSongs = 1
let startingSong = 1
const loadAdr = [0x00, 0x80]
const initAdr = [0x00, 0x80]
const playAdr = [0x09, 0x80]

function pad32(string) {
  let name = []
  for (let i = 0; i < 32; i++) {
    if (i < string.length) {
        name.push(string.charCodeAt(i))
    } else {
      name.push(0)
    }
  }
  return name
}

let songName = pad32("Headers")
let artist = pad32("Bobbi Towers")
let copyright = pad32("2024 Bobbi Towers")

let ntscSpeed = [0xff, 0x40]
let banking = [0,0,0,0,0,0,0,0]
let palSpeed = [0x1d, 0x4e]
let playMode = 2
let expansionAudio = 0
let prgLength = 0

const load = [
	// Offset 0x00000080 to 0x0000008C
	0x20, 0x0F, 0x80, 0xA9, 0x00, 0x20, 0x3D, 0x80, 0x60, 0x20, 0x9A, 0x80,
	0x60
];

const init = [
	// Offset 0x0000008F to 0x000000A0
	0xA9, 0x0F, 0x8D, 0x15, 0x40, 0xA9, 0x00, 0x8D, 0x00, 0x02, 0xA9, 0xFF,
	0x8D, 0x03, 0x02, 0x8D, 0x04, 0x02
];

const silence = [
	// Offset 0x000000A1 to 0x000000BC
	0xA9, 0x30, 0x8D, 0x05, 0x02, 0x8D, 0x09, 0x02, 0x8D, 0x11, 0x02, 0xA9,
	0x80, 0x8D, 0x0D, 0x02, 0x60, 0xA9, 0x00, 0x8D, 0x15, 0x40, 0xA9, 0x01,
	0x8D, 0x00, 0x02, 0x60
];

const soundLoad = [
	// Offset 0x000000BD to 0x00000119
	0x8D, 0x01, 0x02, 0x0A, 0xA8, 0xB9, 0x0D, 0x80, 0x85, 0x00, 0xB9, 0x0E,
	0x80, 0x85, 0x01, 0xA0, 0x00, 0xB1, 0x00, 0x8D, 0x02, 0x02, 0xC8, 0xB1,
	0x00, 0xAA, 0xC8, 0xB1, 0x00, 0x9D, 0x15, 0x02, 0xF0, 0x34, 0xC8, 0xB1,
	0x00, 0x9D, 0x1A, 0x02, 0xC8, 0xB1, 0x00, 0x9D, 0x2E, 0x02, 0xC8, 0xB1,
	0x00, 0x9D, 0x26, 0x02, 0xC8, 0xB1, 0x00, 0x9D, 0x1E, 0x02, 0xC8, 0xB1,
	0x00, 0x9D, 0x22, 0x02, 0xA9, 0x01, 0x9D, 0x3A, 0x02, 0x9D, 0x3E, 0x02,
	0xA9, 0x00, 0x9D, 0x2A, 0x02, 0x9D, 0x42, 0x02, 0x9D, 0x46, 0x02, 0x9D,
	0x4A, 0x02, 0xC8, 0xCE, 0x02, 0x02, 0xD0, 0xBB, 0x60
];

const playFrame = [
	// Offset 0x0000011A to 0x00000144
	0xAD, 0x00, 0x02, 0xD0, 0x25, 0x20, 0x21, 0x80, 0xA2, 0x00, 0xBD, 0x15,
	0x02, 0x29, 0x01, 0xF0, 0x11, 0xDE, 0x3A, 0x02, 0xD0, 0x09, 0xBD, 0x3E,
	0x02, 0x9D, 0x3A, 0x02, 0x20, 0xC5, 0x80, 0x20, 0x73, 0x81, 0xE8, 0xE0,
	0x06, 0xD0, 0xE3, 0x20, 0xE8, 0x81, 0x60
];

const fetchByte = [
	// Offset 0x00000145 to 0x000001AF
	0xBD, 0x1E, 0x02, 0x85, 0x00, 0xBD, 0x22, 0x02, 0x85, 0x01, 0xA0, 0x00,
	0xB1, 0x00, 0x10, 0x23, 0xC9, 0xA0, 0x90, 0x0C, 0x20, 0x5A, 0x81, 0xC8,
	0xBD, 0x15, 0x02, 0x29, 0x01, 0xD0, 0xED, 0x60, 0x29, 0x7F, 0x8C, 0x01,
	0x02, 0xA8, 0x9D, 0x3E, 0x02, 0x9D, 0x3A, 0x02, 0xAC, 0x01, 0x02, 0xC8,
	0x4C, 0xD1, 0x80, 0x8D, 0x02, 0x02, 0xBD, 0x1A, 0x02, 0xC9, 0x03, 0xD0,
	0x06, 0x20, 0x30, 0x81, 0x4C, 0x1C, 0x81, 0xAD, 0x02, 0x02, 0x9D, 0x36,
	0x02, 0xC8, 0xB1, 0x00, 0x9D, 0x32, 0x02, 0xA9, 0x00, 0x9D, 0x2A, 0x02,
	0x20, 0x46, 0x81, 0xA9, 0x00, 0x9D, 0x2A, 0x02, 0xC8, 0x98, 0x18, 0x7D,
	0x1E, 0x02, 0x9D, 0x1E, 0x02, 0x90, 0x03, 0xFE, 0x22, 0x02, 0x60
];

const doNoise = [
	// Offset 0x000001B0 to 0x000001C5
	0xAD, 0x02, 0x02, 0x29, 0x10, 0xF0, 0x08, 0xAD, 0x02, 0x02, 0x09, 0x80,
	0x8D, 0x02, 0x02, 0xAD, 0x02, 0x02, 0x9D, 0x32, 0x02, 0x60
];

const checkRest = [
	// Offset 0x000001C6 to 0x000001D9
	0xB1, 0x00, 0xD0, 0x07, 0xBD, 0x15, 0x02, 0x09, 0x02, 0xD0, 0x05, 0xBD,
	0x15, 0x02, 0x29, 0xFD, 0x9D, 0x15, 0x02, 0x60
];

const opcodeLauncher = [
	// Offset 0x000001DA to 0x000001F2
	0x8C, 0x01, 0x02, 0x38, 0xE9, 0xA0, 0x0A, 0xA8, 0xB9, 0x4D, 0x82, 0x85,
	0x02, 0xB9, 0x4E, 0x82, 0x85, 0x03, 0xAC, 0x01, 0x02, 0xC8, 0x6C, 0x02,
	0x00
];

const setTempPorts = [
	// Offset 0x000001F3 to 0x0000020D
	0xBD, 0x1A, 0x02, 0x0A, 0x0A, 0xA8, 0x20, 0x8E, 0x81, 0xA9, 0x08, 0x99,
	0x06, 0x02, 0xBD, 0x32, 0x02, 0x99, 0x07, 0x02, 0xBD, 0x36, 0x02, 0x99,
	0x08, 0x02, 0x60
];

const setStreamVolume = [
	// Offset 0x0000020E to 0x00000267
	0x8C, 0x01, 0x02, 0xBD, 0x26, 0x02, 0x0A, 0xA8, 0xB9, 0xF6, 0x82, 0x85,
	0x00, 0xB9, 0xF7, 0x82, 0x85, 0x01, 0xBC, 0x2A, 0x02, 0xB1, 0x00, 0xC9,
	0xFF, 0xD0, 0x06, 0xDE, 0x2A, 0x02, 0x4C, 0xA0, 0x81, 0x8D, 0x02, 0x02,
	0xE0, 0x02, 0xD0, 0x09, 0xAD, 0x02, 0x02, 0xD0, 0x04, 0xA9, 0x80, 0x30,
	0x08, 0xBD, 0x2E, 0x02, 0x29, 0xF0, 0x0D, 0x02, 0x02, 0xAC, 0x01, 0x02,
	0x99, 0x05, 0x02, 0xFE, 0x2A, 0x02, 0xBD, 0x15, 0x02, 0x29, 0x02, 0xF0,
	0x10, 0xBD, 0x1A, 0x02, 0xC9, 0x02, 0xF0, 0x04, 0xA9, 0x30, 0xD0, 0x02,
	0xA9, 0x80, 0x99, 0x05, 0x02, 0x60
];

const setApu = [
	// Offset 0x00000268 to 0x000002CC
	0xAD, 0x05, 0x02, 0x8D, 0x00, 0x40, 0xAD, 0x06, 0x02, 0x8D, 0x01, 0x40,
	0xAD, 0x07, 0x02, 0x8D, 0x02, 0x40, 0xAD, 0x08, 0x02, 0xCD, 0x03, 0x02,
	0xF0, 0x06, 0x8D, 0x03, 0x40, 0x8D, 0x03, 0x02, 0xAD, 0x09, 0x02, 0x8D,
	0x04, 0x40, 0xAD, 0x0A, 0x02, 0x8D, 0x05, 0x40, 0xAD, 0x0B, 0x02, 0x8D,
	0x06, 0x40, 0xAD, 0x0C, 0x02, 0xCD, 0x04, 0x02, 0xF0, 0x06, 0x8D, 0x07,
	0x40, 0x8D, 0x04, 0x02, 0xAD, 0x0D, 0x02, 0x8D, 0x08, 0x40, 0xAD, 0x0F,
	0x02, 0x8D, 0x0A, 0x40, 0xAD, 0x10, 0x02, 0x8D, 0x0B, 0x40, 0xAD, 0x11,
	0x02, 0x8D, 0x0C, 0x40, 0xAD, 0x13, 0x02, 0x8D, 0x0E, 0x40, 0xAD, 0x14,
	0x02, 0x8D, 0x0F, 0x40, 0x60
];


// opcodes

const endSound = [
	// Offset 0x000002CD to 0x000002FB
	0x63, 0x82, 0x7C, 0x82, 0x91, 0x82, 0x9C, 0x82, 0xA2, 0x82, 0xA8, 0x82,
	0xC8, 0x82, 0xCE, 0x82, 0xD8, 0x82, 0xB5, 0x82, 0xBB, 0x82, 0xBD, 0x15,
	0x02, 0x29, 0xFE, 0x9D, 0x15, 0x02, 0xBD, 0x1A, 0x02, 0xC9, 0x02, 0xF0,
	0x04, 0xA9, 0x30, 0xD0, 0x02, 0xA9, 0x80, 0x9D, 0x2E, 0x02, 0x60
];

const infiniteLoop = [
	// Offset 0x000002FC to 0x00000310
	0xB1, 0x00, 0x9D, 0x1E, 0x02, 0xC8, 0xB1, 0x00, 0x9D, 0x22, 0x02, 0x85,
	0x01, 0xBD, 0x1E, 0x02, 0x85, 0x00, 0xA0, 0xFF, 0x60
];

const volEnv = [
	// Offset 0x00000311 to 0x00000321
	0xB1, 0x00, 0x9D, 0x26, 0x02, 0xA9, 0x00, 0x9D, 0x2A, 0x02, 0x60, 0xB1,
	0x00, 0x9D, 0x2E, 0x02, 0x60
];

const duty = [
	// Offset 0x00000322 to 0x00000327
	0xB1, 0x00, 0x9D, 0x42, 0x02, 0x60
];

const loop1 = [
	// Offset 0x00000328 to 0x00000334
	0xDE, 0x42, 0x02, 0xBD, 0x42, 0x02, 0xF0, 0x03, 0x4C, 0x7C, 0x82, 0xC8,
	0x60
];

const noteOffset = [
	// Offset 0x00000335 to 0x0000033A
	0xB1, 0x00, 0x9D, 0x46, 0x02, 0x60
];

const arp = [
	// Offset 0x0000033B to 0x00000347
	0xDE, 0x46, 0x02, 0xBD, 0x46, 0x02, 0xF0, 0x03, 0x4C, 0x7C, 0x82, 0xC8,
	0x60
];

const setNoteOffset = [
	// Offset 0x00000348 to 0x00000357
	0xB1, 0x00, 0x9D, 0x4A, 0x02, 0x60, 0xB1, 0x00, 0x18, 0x7D, 0x4A, 0x02,
	0x9D, 0x4A, 0x02, 0x60
];

const transpose = [
	// Offset 0x00000358 to 0x00000375
	0xB1, 0x00, 0x85, 0x02, 0xC8, 0xB1, 0x00, 0x85, 0x03, 0x8C, 0x01, 0x02,
	0xBD, 0x42, 0x02, 0xA8, 0x88, 0xB1, 0x02, 0x18, 0x7D, 0x4A, 0x02, 0x9D,
	0x4A, 0x02, 0xAC, 0x01, 0x02, 0x60
];


// table of pointers to volume envelope sequences

const defaultEnvelopes = [
  [0x00, 0xFF], [0x01, 0xFF], [0x02, 0xFF], [0x03, 0xFF],  [0x04, 0xFF], [0x05, 0xFF],
  [0x06, 0xFF], [0x07, 0xFF], [0x08, 0xFF], [0x09, 0xFF], [0x0a, 0xFF], [0x0b, 0xFF],
  [0x0c, 0xFF],[0x0d, 0xFF], [0x0e, 0xFF],[0x0f, 0xFF],
  [0x0E, 0x09, 0x08, 0x06, 0x04, 0x03, 0x02, 0x01, 0x00, 0xFF]
]

export let currentEnvelopes = defaultEnvelopes

let volumeEnvelopes = [].concat(...defaultEnvelopes)

export function resetEnvelopes() {
   currentEnvelopes= [
  [0x00, 0xFF], [0x01, 0xFF], [0x02, 0xFF], [0x03, 0xFF],  [0x04, 0xFF], [0x05, 0xFF],
  [0x06, 0xFF], [0x07, 0xFF], [0x08, 0xFF], [0x09, 0xFF], [0x0a, 0xFF], [0x0b, 0xFF],
  [0x0c, 0xFF],[0x0d, 0xFF], [0x0e, 0xFF],[0x0f, 0xFF],
  [0x0E, 0x09, 0x08, 0x06, 0x04, 0x03, 0x02, 0x01, 0x00, 0xFF]
]
}

export function addEnvelope(envelope) {
  currentEnvelopes.push(envelope)
  volumeEnvelopes = [].concat(...currentEnvelopes)
  vePointers = envPointers(currentEnvelopes)
  songHeaderAdr = fmtWord(0x82f6 + volumeEnvelopes.length + vePointers.length)
  s1 = wordToNum(songHeaderAdr[0], songHeaderAdr[1]) + 29
}

function envPointers(envelopes) {
  let pointers = []
  let index = 0x82f6
  for (let i = 0; i < envelopes.length; i++) {
    // address pointer locations need to account for the length of the table itself
    pointers = pointers.concat(fmtWord(index + (envelopes.length * 2)))
    index += envelopes[i].length
  }
  return pointers
}

let vePointers = envPointers(defaultEnvelopes)

let songHeaderAdr = fmtWord(0x82f6 + volumeEnvelopes.length + vePointers.length)

// sq1 stream is at songHeaderAdr + 29
export let s1 = wordToNum(songHeaderAdr[0], songHeaderAdr[1]) + 29

// remaining pointers set when driver is assembled
export let s2
export let s3
export let s4

// Song header

let numStreams = 4;
const MUSIC_SQ1 = 0;
const MUSIC_SQ2 = 1;
const MUSIC_TRI = 2;
const MUSIC_NOI = 3;

const SQUARE_1 = 0;
const SQUARE_2 = 1;
const TRIANGLE = 2;
const NOISE = 3;

// Song header format:
// 1. Stream
// 2. Status (0 = disabled, 1 = enabled)
// 3. Channel number
// 4. Initial duty
// 5. Volume envelope
// 6. Pointer to stream (2 bytes)

let streams = [];
let songHeader = []
let square1 = [];
let square2 = [];
let tri = [];
let noise = [];

let header = nsfFormat.concat(version, totalSongs, startingSong, loadAdr,
  initAdr, playAdr, songName, artist, copyright, ntscSpeed, banking,
  palSpeed, playMode, expansionAudio, prgLength, 0, 0, 0,)

export let nsfDriver = []

export function assembleDriver(sq1, sq2, t, n) {
  square1 = sq1;
  square2 = sq2;
  tri = t;
  noise = n;
  s2 = sq1.length + s1
  s3 = sq1.length + sq2.length + s1
  s4 = sq1.length + sq2.length + t.length + s1
  streams = [
    MUSIC_SQ1, 1, SQUARE_1, 0xB0, 0x00, fmtWord(s1)[0], fmtWord(s1)[1],
    MUSIC_SQ2, 1, SQUARE_2, 0x30, 0x00, fmtWord(s2)[0], fmtWord(s2)[1],
    MUSIC_TRI, 1, TRIANGLE, 0x81, 0x01, fmtWord(s3)[0], fmtWord(s3)[1],
    MUSIC_NOI, 1, NOISE, 0x1E, 0x10, fmtWord(s4)[0], fmtWord(s4)[1]
  ];
  songHeader = [numStreams].concat(streams);
  nsfDriver = header.concat(load, songHeaderAdr, init, silence, soundLoad, playFrame, fetchByte, doNoise, checkRest, opcodeLauncher, setTempPorts, setStreamVolume, setApu, endSound, infiniteLoop, volEnv, duty, loop1, noteOffset, arp, setNoteOffset, transpose, vePointers, volumeEnvelopes, songHeader, square1, square2, tri, noise)
//console.log(nsfDriver)
}

