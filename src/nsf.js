const nsfFormat = [0x4e, 0x45, 0x53, 0x4d, 0x1a]
const version = 1
let totalSongs = 1
let startingSong = 1
const loadAdr = [0x00, 0x80]
const initAdr = [0x00, 0x80]
const playAdr = [0x07, 0x80]

function pad32(string) {
  let name = []
  for (let i = 0; i < 32; i++) {
    if (i < string.length) {
        name.push(string.charCodeAt(i))
    } else {
      name.push(0)
    }
  }
  return name
}

let songName = pad32("Headers")
let artist = pad32("Bobbi Towers")
let copyright = pad32("2024 Bobbi Towers")

let ntscSpeed = [0xff, 0x40]
let banking = [0,0,0,0,0,0,0,0]
let palSpeed = [0x1d, 0x4e]
let playMode = 3
let expansionAudio = 0
let prgLength = 0

const load = [0x20, 0x0B, 0x80, 0x20, 0x39, 0x80, 0x60, 0x20, 0x88, 0x80, 0x60];
const init = [0xA9, 0x0F, 0x8D, 0x15, 0x40, 0xA9, 0x00, 0x8D, 0x00, 0x02, 0xA9,
  0xFF, 0x8D, 0x03, 0x02, 0x8D, 0x04, 0x02];
const silence = [0xA9, 0x30, 0x8D, 0x05, 0x02, 0x8D, 0x09, 0x02, 0x8D, 0x11,
  0x02, 0xA9, 0x80, 0x8D, 0x0D, 0x02, 0x60, 0xA9, 0x00, 0x8D, 0x15, 0x40, 0xA9,
  0x01, 0x8D, 0x00, 0x02, 0x60];

const soundLoad = [
	// Offset 0x000000B9 to 0x00000107
	0x8D, 0x01, 0x02, 0x0A, 0xA8, 0xB9, 0x1D, 0x82, 0x85, 0x00, 0xB9, 0x1E,
	0x82, 0x85, 0x01, 0xA0, 0x00, 0xB1, 0x00, 0x8D, 0x02, 0x02, 0xC8, 0xB1,
	0x00, 0xAA, 0xC8, 0xB1, 0x00, 0x9D, 0x1B, 0x02, 0xF0, 0x20, 0xC8, 0xB1,
	0x00, 0x9D, 0x21, 0x02, 0xC8, 0xB1, 0x00, 0x9D, 0x33, 0x02, 0xC8, 0xB1,
	0x00, 0x9D, 0x27, 0x02, 0xC8, 0xB1, 0x00, 0x9D, 0x2D, 0x02, 0xA9, 0x01,
	0x9D, 0x45, 0x02, 0x9D, 0x4B, 0x02, 0xC8, 0xAD, 0x01, 0x02, 0x9D, 0x15,
	0x02, 0xCE, 0x02, 0x02, 0xD0, 0xC9, 0x60
];

const playFrame = [
	// Offset 0x00000108 to 0x00000132
	0xAD, 0x00, 0x02, 0xD0, 0x25, 0x20, 0x1D, 0x80, 0xA2, 0x00, 0xBD, 0x1B,
	0x02, 0x29, 0x01, 0xF0, 0x11, 0xDE, 0x45, 0x02, 0xD0, 0x09, 0xBD, 0x4B,
	0x02, 0x9D, 0x45, 0x02, 0x20, 0xB3, 0x80, 0x20, 0x83, 0x81, 0xE8, 0xE0,
	0x06, 0xD0, 0xE3, 0x20, 0xB8, 0x81, 0x60
];

const fetchByte = [
	// Offset 0x00000133 to 0x000001D8
	0xBD, 0x27, 0x02, 0x85, 0x00, 0xBD, 0x2D, 0x02, 0x85, 0x01, 0xA0, 0x00,
	0xB1, 0x00, 0x10, 0x68, 0xC9, 0xE0, 0x90, 0x23, 0xC9, 0xF0, 0x90, 0x32,
	0xC9, 0xF4, 0x90, 0x42, 0xBD, 0x1B, 0x02, 0x29, 0xFE, 0x9D, 0x1B, 0x02,
	0xBD, 0x21, 0x02, 0xC9, 0x02, 0xF0, 0x04, 0xA9, 0x30, 0xD0, 0x02, 0xA9,
	0x80, 0x9D, 0x33, 0x02, 0x4C, 0x4A, 0x81, 0x29, 0x7F, 0x8C, 0x01, 0x02,
	0xA8, 0x9D, 0x4B, 0x02, 0x9D, 0x45, 0x02, 0xAC, 0x01, 0x02, 0xC8, 0x4C,
	0xBF, 0x80, 0x29, 0x0F, 0x8D, 0x02, 0x02, 0xBD, 0x33, 0x02, 0x29, 0xF0,
	0x0D, 0x02, 0x02, 0x9D, 0x33, 0x02, 0xC8, 0x4C, 0xBF, 0x80, 0x29, 0x03,
	0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x8D, 0x02, 0x02, 0xBD, 0x33, 0x02,
	0x29, 0x3F, 0x0D, 0x02, 0x02, 0x9D, 0x33, 0x02, 0xC8, 0x4C, 0xBF, 0x80,
	0x8D, 0x02, 0x02, 0xBD, 0x21, 0x02, 0xC9, 0x03, 0xD0, 0x06, 0x20, 0x59,
	0x81, 0x4C, 0x4A, 0x81, 0xAD, 0x02, 0x02, 0x9D, 0x3F, 0x02, 0xC8, 0xB1,
	0x00, 0x9D, 0x39, 0x02, 0x20, 0x6F, 0x81, 0xC8, 0x98, 0x18, 0x7D, 0x27,
	0x02, 0x9D, 0x27, 0x02, 0x90, 0x03, 0xFE, 0x2D, 0x02, 0x60
];

const doNoise = [
	// Offset 0x000001D9 to 0x000001EE
	0xAD, 0x02, 0x02, 0x29, 0x10, 0xF0, 0x08, 0xAD, 0x02, 0x02, 0x09, 0x80,
	0x8D, 0x02, 0x02, 0xAD, 0x02, 0x02, 0x9D, 0x39, 0x02, 0x60
];

const checkRest = [
	// Offset 0x000001EF to 0x00000202
	0xB1, 0x00, 0xD0, 0x07, 0xBD, 0x1B, 0x02, 0x09, 0x02, 0xD0, 0x05, 0xBD,
	0x1B, 0x02, 0x29, 0xFD, 0x9D, 0x1B, 0x02, 0x60
];

const setTempPorts = [
	// Offset 0x00000203 to 0x00000237
	0xBD, 0x21, 0x02, 0x0A, 0x0A, 0xA8, 0xBD, 0x33, 0x02, 0x99, 0x05, 0x02,
	0xA9, 0x08, 0x99, 0x06, 0x02, 0xBD, 0x39, 0x02, 0x99, 0x07, 0x02, 0xBD,
	0x3F, 0x02, 0x99, 0x08, 0x02, 0xBD, 0x1B, 0x02, 0x29, 0x02, 0xF0, 0x10,
	0xBD, 0x21, 0x02, 0xC9, 0x02, 0xF0, 0x04, 0xA9, 0x30, 0xD0, 0x02, 0xA9,
	0x80, 0x99, 0x05, 0x02, 0x60
];

const setApu = [
	// Offset 0x00000238 to 0x0000029C
	0xAD, 0x05, 0x02, 0x8D, 0x00, 0x40, 0xAD, 0x06, 0x02, 0x8D, 0x01, 0x40,
	0xAD, 0x07, 0x02, 0x8D, 0x02, 0x40, 0xAD, 0x08, 0x02, 0xCD, 0x03, 0x02,
	0xF0, 0x06, 0x8D, 0x03, 0x40, 0x8D, 0x03, 0x02, 0xAD, 0x09, 0x02, 0x8D,
	0x04, 0x40, 0xAD, 0x0A, 0x02, 0x8D, 0x05, 0x40, 0xAD, 0x0B, 0x02, 0x8D,
	0x06, 0x40, 0xAD, 0x0C, 0x02, 0xCD, 0x04, 0x02, 0xF0, 0x06, 0x8D, 0x07,
	0x40, 0x8D, 0x04, 0x02, 0xAD, 0x0D, 0x02, 0x8D, 0x08, 0x40, 0xAD, 0x0F,
	0x02, 0x8D, 0x0A, 0x40, 0xAD, 0x10, 0x02, 0x8D, 0x0B, 0x40, 0xAD, 0x11,
	0x02, 0x8D, 0x0C, 0x40, 0xAD, 0x13, 0x02, 0x8D, 0x0E, 0x40, 0xAD, 0x14,
	0x02, 0x8D, 0x0F, 0x40, 0x60
];

const songHeaderAdr = [0x1F, 0x82]

// Song header

let numStreams = 4;
const MUSIC_SQ1 = 0;
const MUSIC_SQ2 = 1;
const MUSIC_TRI = 2;
const MUSIC_NOI = 3;

const SQUARE_1 = 0;
const SQUARE_2 = 1;
const TRIANGLE = 2;
const NOISE = 3;

// Song header format:
// 1. Stream
// 2. Status (0 = disabled, 1 = enabled)
// 3. Channel number
// 4. Initial volume and duty
// 5. Pointer to stream (2 bytes)

let streams = [];
let songHeader = []
let square1 = [];
let square2 = [];
let tri = [];
let noise = [];

let header = nsfFormat.concat(version, totalSongs, startingSong, loadAdr,
  initAdr, playAdr, songName, artist, copyright, ntscSpeed, banking,
  palSpeed, playMode, expansionAudio, prgLength, 0, 0, 0,)

export let nsfDriver = header.concat(load, init, silence, soundLoad,
  playFrame, fetchByte, doNoise, checkRest, setTempPorts, setApu,
  songHeaderAdr, songHeader, square1, square2, tri, noise)

// convert number to little-endian word as 2-element array
function fmtWord(n) {
  return [parseInt((n).toString(16).slice(2), 16),
          parseInt((n).toString(16).slice(0, 2), 16)];
}

const data = [
	// Offset 0x0000029F to 0x000002FF
	0x04, 0x00, 0x01, 0x00, 0xBC, 0x38, 0x82, 0x01, 0x01, 0x01, 0x3A, 0x48,
	0x82, 0x02, 0x01, 0x02, 0x81, 0x60, 0x82, 0x03, 0x01, 0x03, 0x1E, 0x6E,
	0x82, 0x94, 0x01, 0x51, 0x01, 0x1C, 0x01, 0x2D, 0x01, 0x51, 0x01, 0x67,
	0x01, 0x51, 0x01, 0x2D, 0xFF, 0x94, 0x02, 0xA6, 0x00, 0x00, 0x01, 0xC4,
	0x00, 0x00, 0x01, 0xAB, 0x00, 0x00, 0x01, 0x93, 0x00, 0x00, 0x01, 0x7C,
	0x00, 0x00, 0x01, 0x67, 0xFF, 0xA8, 0x01, 0x21, 0x01, 0x1C, 0x01, 0x21,
	0x01, 0x67, 0x01, 0x2D, 0x00, 0xFD, 0xFF, 0x94, 0x0D, 0x00, 0x00, 0x07,
	0x00, 0x00, 0x0D, 0x00, 0x00, 0x07, 0x00, 0x00, 0x0D, 0x00, 0x00, 0x07,
	0xFF
];


export function assembleDriver(sq1, sq2, t, n) {
  square1 = sq1;
  square2 = sq2;
  tri = t;
  noise = n;
  const s2lo = fmtWord((sq1.length + 0x8238))[0];
  const s2hi = fmtWord((sq1.length + 0x8238))[1];
  const s3lo = fmtWord((sq1.length + sq2.length + 0x8238))[0];
  const s3hi = fmtWord((sq1.length + sq2.length + 0x8238))[1];
  const s4lo = fmtWord((sq1.length + sq2.length + t.length + 0x8238))[0];
  const s4hi = fmtWord((sq1.length + sq2.length + t.length + 0x8238))[1];
  streams = [
    MUSIC_SQ1, 1, SQUARE_1, 0xBC, 0x38, 0x82,
    MUSIC_SQ2, 1, SQUARE_2, 0x3A, s2lo, s2hi,
    MUSIC_TRI, 1, TRIANGLE, 0x81, s3lo, s3hi,
    MUSIC_NOI, 1, NOISE, 0x1E, s4lo, s4hi
  ];
  songHeader = [numStreams].concat(streams);
  nsfDriver = header.concat(load, init, silence, soundLoad,
    playFrame, fetchByte, doNoise, checkRest, setTempPorts, setApu,
    songHeaderAdr, songHeader, square1, square2, tri, noise)
}

assembleDriver(
  [0x94, 0x01, 0x51, 0x01, 0x1C, 0x01, 0x2D, 0x01, 0x51, 0x01, 0x67,
	0x01, 0x51, 0x01, 0x2D, 0xFF],
  [0x94, 0x02, 0xA6, 0x00, 0x00, 0x01, 0xC4,
	0x00, 0x00, 0x01, 0xAB, 0x00, 0x00, 0x01, 0x93, 0x00, 0x00, 0x01, 0x7C,
	0x00, 0x00, 0x01, 0x67, 0xFF],
  [0xA8, 0x01, 0x21, 0x01, 0x1C, 0x01, 0x21,
	0x01, 0x67, 0x01, 0x2D, 0x00, 0xFD, 0xFF],
  [0x94, 0x0D, 0xE0, 0x00, 0xE9, 0x05, 0xE0, 0x00, 0xEF, 0x0D, 0xE0, 0x07,
	0xFF]
)

